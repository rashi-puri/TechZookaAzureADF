{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "conquerors-df"
		},
		"AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage'"
		},
		"AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase'"
		},
		"AzureSqlDatabaseoutput_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseoutput'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_CustomerGeoJoin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CustomerJoinDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CustomerJoinDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"geography": {},
									"customer": {},
									"CustomerGeoTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CustomerJoinDF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Revenue_Citywise')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RevenueCityWiseDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RevenueCityWiseDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerGeotable": {},
									"internetSales": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/RevenueCityWiseDF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerIdentifier",
						"type": "nvarchar"
					},
					{
						"name": "gender",
						"type": "nvarchar"
					},
					{
						"name": "SeniorCitizen",
						"type": "bit"
					},
					{
						"name": "Partner",
						"type": "bit"
					},
					{
						"name": "Dependents",
						"type": "bit"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "Age",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Country2",
						"type": "nvarchar"
					},
					{
						"name": "PremiumCustomer",
						"type": "bit"
					},
					{
						"name": "PrefferedTransactionMethod",
						"type": "nvarchar"
					},
					{
						"name": "Total_Asset",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerGeoData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "UpdatedShanghai"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerGeoData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableForRevenue')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "CityWiseRevenue"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqloutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Analytics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyCsvFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "school_and_country_table.csv",
						"container": "university-ranking"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "school_name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyCsvOperation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DimCustomer 1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customer.xlsx",
						"container": "adventure-work"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DimCustomer 1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customer.xlsx",
						"container": "adventure-work"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "CustomerKey",
						"type": "String"
					},
					{
						"name": "GeographyKey",
						"type": "String"
					},
					{
						"name": "CustomerAlternateKey",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "NameStyle",
						"type": "String"
					},
					{
						"name": "BirthDate",
						"type": "String"
					},
					{
						"name": "MaritalStatus",
						"type": "String"
					},
					{
						"name": "Suffix",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "EmailAddress",
						"type": "String"
					},
					{
						"name": "YearlyIncome",
						"type": "String"
					},
					{
						"name": "TotalChildren",
						"type": "String"
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "String"
					},
					{
						"name": "EnglishEducation",
						"type": "String"
					},
					{
						"name": "SpanishEducation",
						"type": "String"
					},
					{
						"name": "FrenchEducation",
						"type": "String"
					},
					{
						"name": "EnglishOccupation",
						"type": "String"
					},
					{
						"name": "SpanishOccupation",
						"type": "String"
					},
					{
						"name": "FrenchOccupation",
						"type": "String"
					},
					{
						"name": "HouseOwnerFlag",
						"type": "String"
					},
					{
						"name": "NumberCarsOwned",
						"type": "String"
					},
					{
						"name": "AddressLine1",
						"type": "String"
					},
					{
						"name": "AddressLine2",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "DateFirstPurchase",
						"type": "String"
					},
					{
						"name": "CommuteDistance",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "school_and_country_table.csv",
						"container": "university-ranking"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "shanghaiData.csv",
						"container": "university-ranking"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "shanghaiData.csv",
						"container": "university-ranking"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "FactInternetSales.xlsx",
						"container": "adventure-work"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Geography1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DimGeography.csv",
						"container": "adventure-work"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InternetSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "FactInternetSales.xlsx",
						"container": "adventure-work"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvsource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Product_Service_Catalog.csv",
						"container": "servicecatalog"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Group",
						"type": "String"
					},
					{
						"name": "Descritpion",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customer.xlsx",
						"container": "adventure-work"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/geography')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DimGeography.csv",
						"container": "adventure-work"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/updatedcustcity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseoutput",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Revenue_Citywise"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseoutput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseoutput_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TR_PL_MASTER')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This trigger will execute PL_MASTER pipeline every day at 9 am",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-11-13T09:00:00",
						"endTime": "2022-11-30T00:51:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerJoinDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "geography",
								"type": "DatasetReference"
							},
							"name": "geography"
						},
						{
							"dataset": {
								"referenceName": "Customer1",
								"type": "DatasetReference"
							},
							"name": "customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "CustomerGeoTable"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "SelectingReqColumns"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          GeographyKey as short,",
						"          City as string,",
						"          StateProvinceCode as string,",
						"          StateProvinceName as string,",
						"          CountryRegionCode as string,",
						"          EnglishCountryRegionName as string,",
						"          SpanishCountryRegionName as string,",
						"          FrenchCountryRegionName as string,",
						"          PostalCode as string,",
						"          SalesTerritoryKey as short,",
						"          IpAddressLocator as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> geography",
						"source(output(",
						"          CustomerKey as short,",
						"          GeographyKey as short,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as integer,",
						"          TotalChildren as short,",
						"          NumberChildrenAtHome as short,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as boolean,",
						"          NumberCarsOwned as short,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"geography, customer join(geography@GeographyKey == customer@GeographyKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          CustomerKey,",
						"          GeographyKey = customer@GeographyKey,",
						"          FirstName,",
						"          LastName,",
						"          Gender,",
						"          City,",
						"          PostalCode,",
						"          SalesTerritoryKey,",
						"          EmailAddress,",
						"          MaritalStatus,",
						"          BirthDate,",
						"          YearlyIncome,",
						"          TotalChildren,",
						"          NumberChildrenAtHome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingReqColumns",
						"SelectingReqColumns alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CustomerKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CustomerGeoTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/geography')]",
				"[concat(variables('factoryId'), '/datasets/Customer1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RevenueCityWiseDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "CustomerGeotable"
						},
						{
							"dataset": {
								"referenceName": "InternetSales",
								"type": "DatasetReference"
							},
							"name": "internetSales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableForRevenue",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joiningtables"
						},
						{
							"name": "selectRevenueCol"
						},
						{
							"name": "RevenueCityWise"
						},
						{
							"name": "sortingRevenue"
						},
						{
							"name": "AlterRowforRevenue"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as short,",
						"          GeographyKey as short,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Gender as string,",
						"          City as string,",
						"          PostalCode as string,",
						"          SalesTerritoryKey as short,",
						"          EmailAddress as string,",
						"          MaritalStatus as string,",
						"          BirthDate as date,",
						"          YearlyIncome as integer,",
						"          TotalChildren as short,",
						"          NumberChildrenAtHome as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CustomerGeotable",
						"source(output(",
						"          ProductKey as short,",
						"          OrderDateKey as date,",
						"          DueDateKey as date,",
						"          ShipDateKey as date,",
						"          CustomerKey as short,",
						"          PromotionKey as short,",
						"          CurrencyKey as short,",
						"          SalesTerritoryKey as short,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as short,",
						"          RevisionNumber as boolean,",
						"          OrderQuantity as boolean,",
						"          UnitPrice as double,",
						"          ExtendedAmount as double,",
						"          UnitPriceDiscountPct as boolean,",
						"          DiscountAmount as boolean,",
						"          ProductStandardCost as double,",
						"          TotalProductCost as double,",
						"          SalesAmount as double,",
						"          TaxAmt as double,",
						"          Freight as double,",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as date,",
						"          DueDate as date,",
						"          ShipDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> internetSales",
						"CustomerGeotable, internetSales join(CustomerGeotable@CustomerKey == internetSales@CustomerKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningtables",
						"joiningtables select(mapColumn(",
						"          GeographyKey,",
						"          City,",
						"          PostalCode,",
						"          ProductKey,",
						"          SalesTerritoryKey = internetSales@SalesTerritoryKey,",
						"          OrderQuantity,",
						"          SalesAmount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRevenueCol",
						"selectRevenueCol aggregate(groupBy(City),",
						"     Total_Revenue = round(sum(SalesAmount),0)) ~> RevenueCityWise",
						"RevenueCityWise sort(desc(Total_Revenue, true)) ~> sortingRevenue",
						"sortingRevenue alterRow(upsertIf(true())) ~> AlterRowforRevenue",
						"AlterRowforRevenue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['City'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/InternetSales')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableForRevenue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/join_Cust_geo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "joining customer and geography on basis of g key",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "geography",
								"type": "DatasetReference"
							},
							"name": "geography"
						},
						{
							"dataset": {
								"referenceName": "Customer1",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "InternetSales",
								"type": "DatasetReference"
							},
							"name": "InternelSales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "updatedcustcity",
								"type": "DatasetReference"
							},
							"name": "revenueDesc"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "filteringColumns"
						},
						{
							"name": "join2"
						},
						{
							"name": "mostSpentCity"
						},
						{
							"name": "sumOfRevenue"
						},
						{
							"name": "revenueDesc1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          GeographyKey as short,",
						"          City as string,",
						"          StateProvinceCode as string,",
						"          StateProvinceName as string,",
						"          CountryRegionCode as string,",
						"          EnglishCountryRegionName as string,",
						"          SpanishCountryRegionName as string,",
						"          FrenchCountryRegionName as string,",
						"          PostalCode as string,",
						"          SalesTerritoryKey as short,",
						"          IpAddressLocator as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> geography",
						"source(output(",
						"          CustomerKey as short,",
						"          GeographyKey as short,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as integer,",
						"          TotalChildren as short,",
						"          NumberChildrenAtHome as short,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as boolean,",
						"          NumberCarsOwned as short,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"source(output(",
						"          ProductKey as short,",
						"          OrderDateKey as date,",
						"          DueDateKey as date,",
						"          ShipDateKey as date,",
						"          CustomerKey as short,",
						"          PromotionKey as short,",
						"          CurrencyKey as short,",
						"          SalesTerritoryKey as short,",
						"          SalesOrderNumber as string,",
						"          SalesOrderLineNumber as short,",
						"          RevisionNumber as boolean,",
						"          OrderQuantity as boolean,",
						"          UnitPrice as double,",
						"          ExtendedAmount as double,",
						"          UnitPriceDiscountPct as boolean,",
						"          DiscountAmount as boolean,",
						"          ProductStandardCost as double,",
						"          TotalProductCost as double,",
						"          SalesAmount as double,",
						"          TaxAmt as double,",
						"          Freight as double,",
						"          CarrierTrackingNumber as string,",
						"          CustomerPONumber as string,",
						"          OrderDate as date,",
						"          DueDate as date,",
						"          ShipDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InternelSales",
						"geography, customer join(geography@GeographyKey == customer@GeographyKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          CustomerKey,",
						"          GeographyKey = customer@GeographyKey,",
						"          FirstName,",
						"          LastName,",
						"          Gender,",
						"          City,",
						"          PostalCode,",
						"          SalesTerritoryKey,",
						"          EmailAddress,",
						"          MaritalStatus,",
						"          BirthDate,",
						"          YearlyIncome,",
						"          TotalChildren,",
						"          NumberChildrenAtHome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> filteringColumns",
						"filteringColumns, InternelSales join(filteringColumns@CustomerKey == InternelSales@CustomerKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          GeographyKey,",
						"          City,",
						"          PostalCode,",
						"          ProductKey,",
						"          SalesTerritoryKey = InternelSales@SalesTerritoryKey,",
						"          OrderQuantity,",
						"          SalesAmount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> mostSpentCity",
						"mostSpentCity aggregate(groupBy(City),",
						"     Total_Revenue = round(sum(SalesAmount),0)) ~> sumOfRevenue",
						"sumOfRevenue sort(desc(Total_Revenue, true),",
						"     caseInsensitive: true) ~> revenueDesc1",
						"revenueDesc1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['City'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> revenueDesc"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/geography')]",
				"[concat(variables('factoryId'), '/datasets/Customer1')]",
				"[concat(variables('factoryId'), '/datasets/InternetSales')]",
				"[concat(variables('factoryId'), '/datasets/updatedcustcity')]"
			]
		}
	]
}